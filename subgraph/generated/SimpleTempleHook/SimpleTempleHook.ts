// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CharitableDonationTaken extends ethereum.Event {
  get params(): CharitableDonationTaken__Params {
    return new CharitableDonationTaken__Params(this);
  }
}

export class CharitableDonationTaken__Params {
  _event: CharitableDonationTaken;

  constructor(event: CharitableDonationTaken) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get donationCurrency(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get donationAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get charityEIN(): string {
    return this._event.parameters[4].value.toString();
  }

  get taxReceiptStatement(): string {
    return this._event.parameters[5].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class CharityAddressUpdated extends ethereum.Event {
  get params(): CharityAddressUpdated__Params {
    return new CharityAddressUpdated__Params(this);
  }
}

export class CharityAddressUpdated__Params {
  _event: CharityAddressUpdated;

  constructor(event: CharityAddressUpdated) {
    this._event = event;
  }

  get oldCharity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newCharity(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DonationManagerUpdated extends ethereum.Event {
  get params(): DonationManagerUpdated__Params {
    return new DonationManagerUpdated__Params(this);
  }
}

export class DonationManagerUpdated__Params {
  _event: DonationManagerUpdated;

  constructor(event: DonationManagerUpdated) {
    this._event = event;
  }

  get newDonationManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DonationPercentageUpdated extends ethereum.Event {
  get params(): DonationPercentageUpdated__Params {
    return new DonationPercentageUpdated__Params(this);
  }
}

export class DonationPercentageUpdated__Params {
  _event: DonationPercentageUpdated;

  constructor(event: DonationPercentageUpdated) {
    this._event = event;
  }

  get newDonationPercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SimpleTempleHook__afterAddLiquidityResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getValue0(): Bytes {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class SimpleTempleHook__afterAddLiquidityInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class SimpleTempleHook__afterAddLiquidityInputParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class SimpleTempleHook__afterDonateInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class SimpleTempleHook__afterInitializeInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class SimpleTempleHook__afterRemoveLiquidityResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getValue0(): Bytes {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class SimpleTempleHook__afterRemoveLiquidityInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class SimpleTempleHook__afterRemoveLiquidityInputParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class SimpleTempleHook__afterSwapResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getValue0(): Bytes {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class SimpleTempleHook__afterSwapInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class SimpleTempleHook__afterSwapInputParamsStruct extends ethereum.Tuple {
  get zeroForOne(): boolean {
    return this[0].toBoolean();
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }
}

export class SimpleTempleHook__beforeAddLiquidityInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class SimpleTempleHook__beforeAddLiquidityInputParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class SimpleTempleHook__beforeDonateInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class SimpleTempleHook__beforeInitializeInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class SimpleTempleHook__beforeRemoveLiquidityInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class SimpleTempleHook__beforeRemoveLiquidityInputParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class SimpleTempleHook__beforeSwapResult {
  value0: Bytes;
  value1: BigInt;
  value2: i32;

  constructor(value0: Bytes, value1: BigInt, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    return map;
  }

  getValue0(): Bytes {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): i32 {
    return this.value2;
  }
}

export class SimpleTempleHook__beforeSwapInputKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class SimpleTempleHook__beforeSwapInputParamsStruct extends ethereum.Tuple {
  get zeroForOne(): boolean {
    return this[0].toBoolean();
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }
}

export class SimpleTempleHook__getHookPermissionsResultValue0Struct extends ethereum.Tuple {
  get beforeInitialize(): boolean {
    return this[0].toBoolean();
  }

  get afterInitialize(): boolean {
    return this[1].toBoolean();
  }

  get beforeAddLiquidity(): boolean {
    return this[2].toBoolean();
  }

  get afterAddLiquidity(): boolean {
    return this[3].toBoolean();
  }

  get beforeRemoveLiquidity(): boolean {
    return this[4].toBoolean();
  }

  get afterRemoveLiquidity(): boolean {
    return this[5].toBoolean();
  }

  get beforeSwap(): boolean {
    return this[6].toBoolean();
  }

  get afterSwap(): boolean {
    return this[7].toBoolean();
  }

  get beforeDonate(): boolean {
    return this[8].toBoolean();
  }

  get afterDonate(): boolean {
    return this[9].toBoolean();
  }

  get beforeSwapReturnDelta(): boolean {
    return this[10].toBoolean();
  }

  get afterSwapReturnDelta(): boolean {
    return this[11].toBoolean();
  }

  get afterAddLiquidityReturnDelta(): boolean {
    return this[12].toBoolean();
  }

  get afterRemoveLiquidityReturnDelta(): boolean {
    return this[13].toBoolean();
  }
}

export class SimpleTempleHook extends ethereum.SmartContract {
  static bind(address: Address): SimpleTempleHook {
    return new SimpleTempleHook("SimpleTempleHook", address);
  }

  afterAddLiquidity(
    sender: Address,
    key: SimpleTempleHook__afterAddLiquidityInputKeyStruct,
    params: SimpleTempleHook__afterAddLiquidityInputParamsStruct,
    delta: BigInt,
    feesAccrued: BigInt,
    hookData: Bytes,
  ): SimpleTempleHook__afterAddLiquidityResult {
    let result = super.call(
      "afterAddLiquidity",
      "afterAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes):(bytes4,int256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromSignedBigInt(delta),
        ethereum.Value.fromSignedBigInt(feesAccrued),
        ethereum.Value.fromBytes(hookData),
      ],
    );

    return new SimpleTempleHook__afterAddLiquidityResult(
      result[0].toBytes(),
      result[1].toBigInt(),
    );
  }

  try_afterAddLiquidity(
    sender: Address,
    key: SimpleTempleHook__afterAddLiquidityInputKeyStruct,
    params: SimpleTempleHook__afterAddLiquidityInputParamsStruct,
    delta: BigInt,
    feesAccrued: BigInt,
    hookData: Bytes,
  ): ethereum.CallResult<SimpleTempleHook__afterAddLiquidityResult> {
    let result = super.tryCall(
      "afterAddLiquidity",
      "afterAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes):(bytes4,int256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromSignedBigInt(delta),
        ethereum.Value.fromSignedBigInt(feesAccrued),
        ethereum.Value.fromBytes(hookData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SimpleTempleHook__afterAddLiquidityResult(
        value[0].toBytes(),
        value[1].toBigInt(),
      ),
    );
  }

  afterDonate(
    sender: Address,
    key: SimpleTempleHook__afterDonateInputKeyStruct,
    amount0: BigInt,
    amount1: BigInt,
    hookData: Bytes,
  ): Bytes {
    let result = super.call(
      "afterDonate",
      "afterDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1),
        ethereum.Value.fromBytes(hookData),
      ],
    );

    return result[0].toBytes();
  }

  try_afterDonate(
    sender: Address,
    key: SimpleTempleHook__afterDonateInputKeyStruct,
    amount0: BigInt,
    amount1: BigInt,
    hookData: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterDonate",
      "afterDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1),
        ethereum.Value.fromBytes(hookData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterInitialize(
    sender: Address,
    key: SimpleTempleHook__afterInitializeInputKeyStruct,
    sqrtPriceX96: BigInt,
    tick: i32,
  ): Bytes {
    let result = super.call(
      "afterInitialize",
      "afterInitialize(address,(address,address,uint24,int24,address),uint160,int24):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceX96),
        ethereum.Value.fromI32(tick),
      ],
    );

    return result[0].toBytes();
  }

  try_afterInitialize(
    sender: Address,
    key: SimpleTempleHook__afterInitializeInputKeyStruct,
    sqrtPriceX96: BigInt,
    tick: i32,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterInitialize",
      "afterInitialize(address,(address,address,uint24,int24,address),uint160,int24):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceX96),
        ethereum.Value.fromI32(tick),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterRemoveLiquidity(
    sender: Address,
    key: SimpleTempleHook__afterRemoveLiquidityInputKeyStruct,
    params: SimpleTempleHook__afterRemoveLiquidityInputParamsStruct,
    delta: BigInt,
    feesAccrued: BigInt,
    hookData: Bytes,
  ): SimpleTempleHook__afterRemoveLiquidityResult {
    let result = super.call(
      "afterRemoveLiquidity",
      "afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes):(bytes4,int256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromSignedBigInt(delta),
        ethereum.Value.fromSignedBigInt(feesAccrued),
        ethereum.Value.fromBytes(hookData),
      ],
    );

    return new SimpleTempleHook__afterRemoveLiquidityResult(
      result[0].toBytes(),
      result[1].toBigInt(),
    );
  }

  try_afterRemoveLiquidity(
    sender: Address,
    key: SimpleTempleHook__afterRemoveLiquidityInputKeyStruct,
    params: SimpleTempleHook__afterRemoveLiquidityInputParamsStruct,
    delta: BigInt,
    feesAccrued: BigInt,
    hookData: Bytes,
  ): ethereum.CallResult<SimpleTempleHook__afterRemoveLiquidityResult> {
    let result = super.tryCall(
      "afterRemoveLiquidity",
      "afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes):(bytes4,int256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromSignedBigInt(delta),
        ethereum.Value.fromSignedBigInt(feesAccrued),
        ethereum.Value.fromBytes(hookData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SimpleTempleHook__afterRemoveLiquidityResult(
        value[0].toBytes(),
        value[1].toBigInt(),
      ),
    );
  }

  afterSwap(
    sender: Address,
    key: SimpleTempleHook__afterSwapInputKeyStruct,
    params: SimpleTempleHook__afterSwapInputParamsStruct,
    delta: BigInt,
    hookData: Bytes,
  ): SimpleTempleHook__afterSwapResult {
    let result = super.call(
      "afterSwap",
      "afterSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),int256,bytes):(bytes4,int128)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromSignedBigInt(delta),
        ethereum.Value.fromBytes(hookData),
      ],
    );

    return new SimpleTempleHook__afterSwapResult(
      result[0].toBytes(),
      result[1].toBigInt(),
    );
  }

  try_afterSwap(
    sender: Address,
    key: SimpleTempleHook__afterSwapInputKeyStruct,
    params: SimpleTempleHook__afterSwapInputParamsStruct,
    delta: BigInt,
    hookData: Bytes,
  ): ethereum.CallResult<SimpleTempleHook__afterSwapResult> {
    let result = super.tryCall(
      "afterSwap",
      "afterSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),int256,bytes):(bytes4,int128)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromSignedBigInt(delta),
        ethereum.Value.fromBytes(hookData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SimpleTempleHook__afterSwapResult(
        value[0].toBytes(),
        value[1].toBigInt(),
      ),
    );
  }

  beforeAddLiquidity(
    sender: Address,
    key: SimpleTempleHook__beforeAddLiquidityInputKeyStruct,
    params: SimpleTempleHook__beforeAddLiquidityInputParamsStruct,
    hookData: Bytes,
  ): Bytes {
    let result = super.call(
      "beforeAddLiquidity",
      "beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromBytes(hookData),
      ],
    );

    return result[0].toBytes();
  }

  try_beforeAddLiquidity(
    sender: Address,
    key: SimpleTempleHook__beforeAddLiquidityInputKeyStruct,
    params: SimpleTempleHook__beforeAddLiquidityInputParamsStruct,
    hookData: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAddLiquidity",
      "beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromBytes(hookData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeDonate(
    sender: Address,
    key: SimpleTempleHook__beforeDonateInputKeyStruct,
    amount0: BigInt,
    amount1: BigInt,
    hookData: Bytes,
  ): Bytes {
    let result = super.call(
      "beforeDonate",
      "beforeDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1),
        ethereum.Value.fromBytes(hookData),
      ],
    );

    return result[0].toBytes();
  }

  try_beforeDonate(
    sender: Address,
    key: SimpleTempleHook__beforeDonateInputKeyStruct,
    amount0: BigInt,
    amount1: BigInt,
    hookData: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeDonate",
      "beforeDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(amount0),
        ethereum.Value.fromUnsignedBigInt(amount1),
        ethereum.Value.fromBytes(hookData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeInitialize(
    sender: Address,
    key: SimpleTempleHook__beforeInitializeInputKeyStruct,
    sqrtPriceX96: BigInt,
  ): Bytes {
    let result = super.call(
      "beforeInitialize",
      "beforeInitialize(address,(address,address,uint24,int24,address),uint160):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceX96),
      ],
    );

    return result[0].toBytes();
  }

  try_beforeInitialize(
    sender: Address,
    key: SimpleTempleHook__beforeInitializeInputKeyStruct,
    sqrtPriceX96: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeInitialize",
      "beforeInitialize(address,(address,address,uint24,int24,address),uint160):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceX96),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeRemoveLiquidity(
    sender: Address,
    key: SimpleTempleHook__beforeRemoveLiquidityInputKeyStruct,
    params: SimpleTempleHook__beforeRemoveLiquidityInputParamsStruct,
    hookData: Bytes,
  ): Bytes {
    let result = super.call(
      "beforeRemoveLiquidity",
      "beforeRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromBytes(hookData),
      ],
    );

    return result[0].toBytes();
  }

  try_beforeRemoveLiquidity(
    sender: Address,
    key: SimpleTempleHook__beforeRemoveLiquidityInputKeyStruct,
    params: SimpleTempleHook__beforeRemoveLiquidityInputParamsStruct,
    hookData: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeRemoveLiquidity",
      "beforeRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromBytes(hookData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeSwap(
    sender: Address,
    key: SimpleTempleHook__beforeSwapInputKeyStruct,
    params: SimpleTempleHook__beforeSwapInputParamsStruct,
    hookData: Bytes,
  ): SimpleTempleHook__beforeSwapResult {
    let result = super.call(
      "beforeSwap",
      "beforeSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),bytes):(bytes4,int256,uint24)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromBytes(hookData),
      ],
    );

    return new SimpleTempleHook__beforeSwapResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toI32(),
    );
  }

  try_beforeSwap(
    sender: Address,
    key: SimpleTempleHook__beforeSwapInputKeyStruct,
    params: SimpleTempleHook__beforeSwapInputParamsStruct,
    hookData: Bytes,
  ): ethereum.CallResult<SimpleTempleHook__beforeSwapResult> {
    let result = super.tryCall(
      "beforeSwap",
      "beforeSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),bytes):(bytes4,int256,uint24)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromTuple(params),
        ethereum.Value.fromBytes(hookData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SimpleTempleHook__beforeSwapResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toI32(),
      ),
    );
  }

  charityAddress(): Address {
    let result = super.call("charityAddress", "charityAddress():(address)", []);

    return result[0].toAddress();
  }

  try_charityAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "charityAddress",
      "charityAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDonationDenominator(): BigInt {
    let result = super.call(
      "getDonationDenominator",
      "getDonationDenominator():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getDonationDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDonationDenominator",
      "getDonationDenominator():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDonationManager(): Address {
    let result = super.call(
      "getDonationManager",
      "getDonationManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getDonationManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDonationManager",
      "getDonationManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHookDonationPercentage(): BigInt {
    let result = super.call(
      "getHookDonationPercentage",
      "getHookDonationPercentage():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getHookDonationPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHookDonationPercentage",
      "getHookDonationPercentage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHookPermissions(): SimpleTempleHook__getHookPermissionsResultValue0Struct {
    let result = super.call(
      "getHookPermissions",
      "getHookPermissions():((bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))",
      [],
    );

    return changetype<SimpleTempleHook__getHookPermissionsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getHookPermissions(): ethereum.CallResult<SimpleTempleHook__getHookPermissionsResultValue0Struct> {
    let result = super.tryCall(
      "getHookPermissions",
      "getHookPermissions():((bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SimpleTempleHook__getHookPermissionsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  parseHookData(data: Bytes): Address {
    let result = super.call("parseHookData", "parseHookData(bytes):(address)", [
      ethereum.Value.fromBytes(data),
    ]);

    return result[0].toAddress();
  }

  try_parseHookData(data: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "parseHookData",
      "parseHookData(bytes):(address)",
      [ethereum.Value.fromBytes(data)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolManager(): Address {
    let result = super.call("poolManager", "poolManager():(address)", []);

    return result[0].toAddress();
  }

  try_poolManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolManager", "poolManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  qubitEIN(): string {
    let result = super.call("qubitEIN", "qubitEIN():(string)", []);

    return result[0].toString();
  }

  try_qubitEIN(): ethereum.CallResult<string> {
    let result = super.tryCall("qubitEIN", "qubitEIN():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _poolManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialCharity(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get initialManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AfterAddLiquidityCall extends ethereum.Call {
  get inputs(): AfterAddLiquidityCall__Inputs {
    return new AfterAddLiquidityCall__Inputs(this);
  }

  get outputs(): AfterAddLiquidityCall__Outputs {
    return new AfterAddLiquidityCall__Outputs(this);
  }
}

export class AfterAddLiquidityCall__Inputs {
  _call: AfterAddLiquidityCall;

  constructor(call: AfterAddLiquidityCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get key(): AfterAddLiquidityCallKeyStruct {
    return changetype<AfterAddLiquidityCallKeyStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get params(): AfterAddLiquidityCallParamsStruct {
    return changetype<AfterAddLiquidityCallParamsStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }

  get delta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get feesAccrued(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get hookData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAddLiquidityCall__Outputs {
  _call: AfterAddLiquidityCall;

  constructor(call: AfterAddLiquidityCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class AfterAddLiquidityCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class AfterAddLiquidityCallParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class AfterDonateCall extends ethereum.Call {
  get inputs(): AfterDonateCall__Inputs {
    return new AfterDonateCall__Inputs(this);
  }

  get outputs(): AfterDonateCall__Outputs {
    return new AfterDonateCall__Outputs(this);
  }
}

export class AfterDonateCall__Inputs {
  _call: AfterDonateCall;

  constructor(call: AfterDonateCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get key(): AfterDonateCallKeyStruct {
    return changetype<AfterDonateCallKeyStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get amount0(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get hookData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AfterDonateCall__Outputs {
  _call: AfterDonateCall;

  constructor(call: AfterDonateCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterDonateCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class AfterInitializeCall extends ethereum.Call {
  get inputs(): AfterInitializeCall__Inputs {
    return new AfterInitializeCall__Inputs(this);
  }

  get outputs(): AfterInitializeCall__Outputs {
    return new AfterInitializeCall__Outputs(this);
  }
}

export class AfterInitializeCall__Inputs {
  _call: AfterInitializeCall;

  constructor(call: AfterInitializeCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get key(): AfterInitializeCallKeyStruct {
    return changetype<AfterInitializeCallKeyStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get sqrtPriceX96(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tick(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class AfterInitializeCall__Outputs {
  _call: AfterInitializeCall;

  constructor(call: AfterInitializeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterInitializeCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class AfterRemoveLiquidityCall extends ethereum.Call {
  get inputs(): AfterRemoveLiquidityCall__Inputs {
    return new AfterRemoveLiquidityCall__Inputs(this);
  }

  get outputs(): AfterRemoveLiquidityCall__Outputs {
    return new AfterRemoveLiquidityCall__Outputs(this);
  }
}

export class AfterRemoveLiquidityCall__Inputs {
  _call: AfterRemoveLiquidityCall;

  constructor(call: AfterRemoveLiquidityCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get key(): AfterRemoveLiquidityCallKeyStruct {
    return changetype<AfterRemoveLiquidityCallKeyStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get params(): AfterRemoveLiquidityCallParamsStruct {
    return changetype<AfterRemoveLiquidityCallParamsStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }

  get delta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get feesAccrued(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get hookData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterRemoveLiquidityCall__Outputs {
  _call: AfterRemoveLiquidityCall;

  constructor(call: AfterRemoveLiquidityCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class AfterRemoveLiquidityCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class AfterRemoveLiquidityCallParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class AfterSwapCall extends ethereum.Call {
  get inputs(): AfterSwapCall__Inputs {
    return new AfterSwapCall__Inputs(this);
  }

  get outputs(): AfterSwapCall__Outputs {
    return new AfterSwapCall__Outputs(this);
  }
}

export class AfterSwapCall__Inputs {
  _call: AfterSwapCall;

  constructor(call: AfterSwapCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get key(): AfterSwapCallKeyStruct {
    return changetype<AfterSwapCallKeyStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get params(): AfterSwapCallParamsStruct {
    return changetype<AfterSwapCallParamsStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }

  get delta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get hookData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class AfterSwapCall__Outputs {
  _call: AfterSwapCall;

  constructor(call: AfterSwapCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class AfterSwapCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class AfterSwapCallParamsStruct extends ethereum.Tuple {
  get zeroForOne(): boolean {
    return this[0].toBoolean();
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }
}

export class BeforeAddLiquidityCall extends ethereum.Call {
  get inputs(): BeforeAddLiquidityCall__Inputs {
    return new BeforeAddLiquidityCall__Inputs(this);
  }

  get outputs(): BeforeAddLiquidityCall__Outputs {
    return new BeforeAddLiquidityCall__Outputs(this);
  }
}

export class BeforeAddLiquidityCall__Inputs {
  _call: BeforeAddLiquidityCall;

  constructor(call: BeforeAddLiquidityCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get key(): BeforeAddLiquidityCallKeyStruct {
    return changetype<BeforeAddLiquidityCallKeyStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get params(): BeforeAddLiquidityCallParamsStruct {
    return changetype<BeforeAddLiquidityCallParamsStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }

  get hookData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BeforeAddLiquidityCall__Outputs {
  _call: BeforeAddLiquidityCall;

  constructor(call: BeforeAddLiquidityCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class BeforeAddLiquidityCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class BeforeAddLiquidityCallParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class BeforeDonateCall extends ethereum.Call {
  get inputs(): BeforeDonateCall__Inputs {
    return new BeforeDonateCall__Inputs(this);
  }

  get outputs(): BeforeDonateCall__Outputs {
    return new BeforeDonateCall__Outputs(this);
  }
}

export class BeforeDonateCall__Inputs {
  _call: BeforeDonateCall;

  constructor(call: BeforeDonateCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get key(): BeforeDonateCallKeyStruct {
    return changetype<BeforeDonateCallKeyStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get amount0(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get hookData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class BeforeDonateCall__Outputs {
  _call: BeforeDonateCall;

  constructor(call: BeforeDonateCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class BeforeDonateCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class BeforeInitializeCall extends ethereum.Call {
  get inputs(): BeforeInitializeCall__Inputs {
    return new BeforeInitializeCall__Inputs(this);
  }

  get outputs(): BeforeInitializeCall__Outputs {
    return new BeforeInitializeCall__Outputs(this);
  }
}

export class BeforeInitializeCall__Inputs {
  _call: BeforeInitializeCall;

  constructor(call: BeforeInitializeCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get key(): BeforeInitializeCallKeyStruct {
    return changetype<BeforeInitializeCallKeyStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get sqrtPriceX96(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BeforeInitializeCall__Outputs {
  _call: BeforeInitializeCall;

  constructor(call: BeforeInitializeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class BeforeInitializeCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class BeforeRemoveLiquidityCall extends ethereum.Call {
  get inputs(): BeforeRemoveLiquidityCall__Inputs {
    return new BeforeRemoveLiquidityCall__Inputs(this);
  }

  get outputs(): BeforeRemoveLiquidityCall__Outputs {
    return new BeforeRemoveLiquidityCall__Outputs(this);
  }
}

export class BeforeRemoveLiquidityCall__Inputs {
  _call: BeforeRemoveLiquidityCall;

  constructor(call: BeforeRemoveLiquidityCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get key(): BeforeRemoveLiquidityCallKeyStruct {
    return changetype<BeforeRemoveLiquidityCallKeyStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get params(): BeforeRemoveLiquidityCallParamsStruct {
    return changetype<BeforeRemoveLiquidityCallParamsStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }

  get hookData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BeforeRemoveLiquidityCall__Outputs {
  _call: BeforeRemoveLiquidityCall;

  constructor(call: BeforeRemoveLiquidityCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class BeforeRemoveLiquidityCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class BeforeRemoveLiquidityCallParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get salt(): Bytes {
    return this[3].toBytes();
  }
}

export class BeforeSwapCall extends ethereum.Call {
  get inputs(): BeforeSwapCall__Inputs {
    return new BeforeSwapCall__Inputs(this);
  }

  get outputs(): BeforeSwapCall__Outputs {
    return new BeforeSwapCall__Outputs(this);
  }
}

export class BeforeSwapCall__Inputs {
  _call: BeforeSwapCall;

  constructor(call: BeforeSwapCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get key(): BeforeSwapCallKeyStruct {
    return changetype<BeforeSwapCallKeyStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get params(): BeforeSwapCallParamsStruct {
    return changetype<BeforeSwapCallParamsStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }

  get hookData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BeforeSwapCall__Outputs {
  _call: BeforeSwapCall;

  constructor(call: BeforeSwapCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): i32 {
    return this._call.outputValues[2].value.toI32();
  }
}

export class BeforeSwapCallKeyStruct extends ethereum.Tuple {
  get currency0(): Address {
    return this[0].toAddress();
  }

  get currency1(): Address {
    return this[1].toAddress();
  }

  get fee(): i32 {
    return this[2].toI32();
  }

  get tickSpacing(): i32 {
    return this[3].toI32();
  }

  get hooks(): Address {
    return this[4].toAddress();
  }
}

export class BeforeSwapCallParamsStruct extends ethereum.Tuple {
  get zeroForOne(): boolean {
    return this[0].toBoolean();
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }
}

export class SetCharityAddressCall extends ethereum.Call {
  get inputs(): SetCharityAddressCall__Inputs {
    return new SetCharityAddressCall__Inputs(this);
  }

  get outputs(): SetCharityAddressCall__Outputs {
    return new SetCharityAddressCall__Outputs(this);
  }
}

export class SetCharityAddressCall__Inputs {
  _call: SetCharityAddressCall;

  constructor(call: SetCharityAddressCall) {
    this._call = call;
  }

  get newCharity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCharityAddressCall__Outputs {
  _call: SetCharityAddressCall;

  constructor(call: SetCharityAddressCall) {
    this._call = call;
  }
}

export class SetDonationManagerCall extends ethereum.Call {
  get inputs(): SetDonationManagerCall__Inputs {
    return new SetDonationManagerCall__Inputs(this);
  }

  get outputs(): SetDonationManagerCall__Outputs {
    return new SetDonationManagerCall__Outputs(this);
  }
}

export class SetDonationManagerCall__Inputs {
  _call: SetDonationManagerCall;

  constructor(call: SetDonationManagerCall) {
    this._call = call;
  }

  get newDonationManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDonationManagerCall__Outputs {
  _call: SetDonationManagerCall;

  constructor(call: SetDonationManagerCall) {
    this._call = call;
  }
}

export class SetDonationPercentageCall extends ethereum.Call {
  get inputs(): SetDonationPercentageCall__Inputs {
    return new SetDonationPercentageCall__Inputs(this);
  }

  get outputs(): SetDonationPercentageCall__Outputs {
    return new SetDonationPercentageCall__Outputs(this);
  }
}

export class SetDonationPercentageCall__Inputs {
  _call: SetDonationPercentageCall;

  constructor(call: SetDonationPercentageCall) {
    this._call = call;
  }

  get newDonationPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDonationPercentageCall__Outputs {
  _call: SetDonationPercentageCall;

  constructor(call: SetDonationPercentageCall) {
    this._call = call;
  }
}
